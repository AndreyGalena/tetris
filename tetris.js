// –ú–æ–¥—É–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
let detect = new MobileDetect(window.navigator.userAgent);
// snake.os = detect.os();

// –ú–æ–±–∏–ª–∫–∞ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä.
if (detect.mobile()) {
    mobileButtons(detect);
} else {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.
    document.addEventListener('keydown', keyDown);
}

// –ï—Å–ª–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º
function mobileButtons(detect) {
    // –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏.
    let blockButton = document.querySelector(".blockButton");
    blockButton.style.display = "block";
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.
    blockButton.addEventListener("click", mobilClick);
}

function mobilClick(event) {
    let element = event.target;
    // –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª–∞—Å—Å –≤ –æ–±—ä–µ–∫—Ç–µ –µ—Å—Ç—å
    if (element.classList.contains("arrowImgUp")) {
        playerRotate();
    } else if (element.classList.contains("arrowImgDown")) {
        playerDrop();
    } else if (element.classList.contains("arrowImgLeft")) {
        playerMove(-1)
    } else if (element.classList.contains("arrowImgRight")) {
        playerMove(1);
    }
}

// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–≤–∞—Å—ã –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
const canvas = document.getElementById('tetris');
const context = canvas.getContext('2d');
context.scale(30, 30);

const previewCanvas = document.getElementById('preview');
const previewCtx = previewCanvas.getContext('2d');
previewCtx.scale(30, 30);

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const scoreEl = document.getElementById('score');
const levelEl = document.getElementById('level');

// –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ ‚Äî –º–∞—Ç—Ä–∏—Ü–∞ 12x20
const arena = createMatrix(12, 20);

// –ü–µ—Ä–≤–∞—è —Ñ–∏–≥—É—Ä–∞
let nextPiece = createPiece(randomPieceType());

// –ò–≥—Ä–æ–∫ –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const player = {
    pos: { x: 5, y: 0 },
    matrix: nextPiece,
    score: 0,
    level: 1
};

// –¢–∞–π–º–µ—Ä—ã
let dropCounter = 0;
let dropInterval = 1000;
let lastTime = 0;

// –§–ª–∞–≥ –ø–∞—É–∑—ã
let isPaused = false;

/* –§–û–ù–û–í–ê–Ø –ú–£–ó–´–ö–ê */
const soundImg = document.querySelector(".sound-img");

soundImg.addEventListener('click', (event) => {
    sound.play(); // –ø—Ä–æ–∏–≥—Ä—É–µ—Ç –∑–≤—É–∫.
})
const sound = new Audio("./music/music.mp3");
// –≤–∫–ª. –ø–æ–≤—Ç–æ—Ä
sound.loop = true;

// –°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç—É—é –º–∞—Ç—Ä–∏—Ü—É
function createMatrix(w, h) {
    const matrix = [];
    while (h--) matrix.push(new Array(w).fill(0));
    return matrix;
}

// –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø —Ñ–∏–≥—É—Ä—ã
function randomPieceType() {
    const pieces = 'TJLOSZI';
    return pieces[Math.floor(Math.random() * pieces.length)];
}

// –°–æ–∑–¥–∞—ë—Ç —Ñ–∏–≥—É—Ä—É –ø–æ —Ç–∏–ø—É
function createPiece(type) {
    switch (type) {
        case 'T': return [[0, 1, 0], [1, 1, 1], [0, 0, 0]];
        case 'O': return [[1, 1], [1, 1]];
        case 'L': return [[0, 0, 1], [1, 1, 1], [0, 0, 0]];
        case 'J': return [[1, 0, 0], [1, 1, 1], [0, 0, 0]];
        case 'I': return [[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]];
        case 'S': return [[0, 1, 1], [1, 1, 0], [0, 0, 0]];
        case 'Z': return [[1, 1, 0], [0, 1, 1], [0, 0, 0]];
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã
function drawMatrix(matrix, offset, ctx, color = 'red') {
    ctx.fillStyle = color;
    matrix.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value) {
                ctx.fillRect(x + offset.x, y + offset.y, 1, 1);
            }
        });
    });
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–≥—É—Ä—ã
function drawPreview() {
    previewCtx.fillStyle = '#000';
    previewCtx.fillRect(0, 0, previewCanvas.width, previewCanvas.height);
    drawMatrix(nextPiece, { x: 1, y: 1 }, previewCtx, 'orange');
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
function draw() {
    context.fillStyle = '#000';
    context.fillRect(0, 0, canvas.width, canvas.height);

    drawGrid();

    // 1) —Å–Ω–∞—á–∞–ª–∞ ghost-piece
    drawGhost();

    // 2) –ø–æ—Ç–æ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
    drawMatrix(arena, { x: 0, y: 0 }, context, 'blue');

    // 3) –∏ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –∞–∫—Ç–∏–≤–Ω–∞—è —Ñ–∏–≥—É—Ä–∞
    drawMatrix(player.matrix, player.pos, context, 'red');
}


function drawGrid() {
    context.strokeStyle = '#333'; // –¶–≤–µ—Ç –ª–∏–Ω–∏–π —Å–µ—Ç–∫–∏
    context.lineWidth = 0.05;

    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let x = 0; x <= canvas.width / 20; x++) {
        context.beginPath();
        context.moveTo(x, 0);
        context.lineTo(x, canvas.height / 20);
        context.stroke();
    }

    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
    for (let y = 0; y <= canvas.height / 20; y++) {
        context.beginPath();
        context.moveTo(0, y);
        context.lineTo(canvas.width / 20, y);
        context.stroke();
    }
}

// üïØÔ∏è –†–∏—Å—É–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Ç–µ–Ω—å —Ç–µ–∫—É—â–µ–π —Ñ–∏–≥—É—Ä—ã
function drawGhost() {
    const { matrix, pos } = player;
    let ghostY = pos.y;

    // –ü–æ–¥–Ω–∏–º–∞–µ–º ghostY, –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏
    while (!collide(arena, { pos: { x: pos.x, y: ghostY + 1 }, matrix })) {
        ghostY++;
    }

    // –†–∏—Å—É–µ–º —Ç–µ–Ω—å —Å –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
    context.globalAlpha = 0.3;
    drawMatrix(matrix, { x: pos.x, y: ghostY }, context, 'white');
    context.globalAlpha = 1;
}


// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—É–∑—ã
function drawPause() {
    draw(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.fillStyle = 'rgba(0, 0, 0, 0.6)';
    context.fillRect(0, canvas.height / 2 - 1, canvas.width, 2);
    context.fillStyle = 'white';
    context.font = '1.5px Arial';
    context.textAlign = 'center';
    context.fillText('PAUSE', canvas.width / 60, canvas.height / 60);
}

// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ–∏–≥—É—Ä—É —Å –∞—Ä–µ–Ω–æ–π
function merge(arena, player) {
    player.matrix.forEach((row, y) => {
        row.forEach((value, x) => {
            if (value) {
                arena[y + player.pos.y][x + player.pos.x] = value;
            }
        });
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
function collide(arena, player) {
    const m = player.matrix;
    const o = player.pos;
    for (let y = 0; y < m.length; ++y) {
        for (let x = 0; x < m[y].length; ++x) {
            if (m[y][x] &&
                (arena[y + o.y] &&
                    arena[y + o.y][x + o.x]) !== 0) {
                return true;
            }
        }
    }
    return false;
}

// –ü–æ–≤–æ—Ä–æ—Ç –º–∞—Ç—Ä–∏—Ü—ã
function rotate(matrix) {
    for (let y = 0; y < matrix.length; ++y) {
        for (let x = 0; x < y; ++x) {
            [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
        }
    }
    matrix.forEach(row => row.reverse());
}

// –ü–æ–≤–æ—Ä–æ—Ç —Ñ–∏–≥—É—Ä—ã –∏–≥—Ä–æ–∫–∞
function playerRotate() {
    const original = JSON.parse(JSON.stringify(player.matrix));
    rotate(player.matrix);
    if (collide(arena, player)) {
        player.matrix = original;
    }
}

// –ü–∞–¥–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
function playerDrop() {
    player.pos.y++;
    if (collide(arena, player)) {
        player.pos.y--;
        merge(arena, player);
        playerReset();
        arenaSweep();
    }
    dropCounter = 0;
}

// –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
function playerMove(dir) {
    player.pos.x += dir;
    if (collide(arena, player)) {
        player.pos.x -= dir;
    }
}

// –°–±—Ä–æ—Å —Ñ–∏–≥—É—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π
function playerReset() {
    player.matrix = nextPiece;
    nextPiece = createPiece(randomPieceType());
    player.pos.y = 0;
    player.pos.x = Math.floor(arena[0].length / 2) - Math.floor(player.matrix[0].length / 2);

    if (collide(arena, player)) {
        arena.forEach(row => row.fill(0));
        player.score = 0;
        player.level = 1;
        dropInterval = 1000;
    }

    updateScore();
    drawPreview();
}

// –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
function arenaSweep() {
    let linesCleared = 0;

    for (let y = arena.length - 1; y >= 0; --y) {
        if (arena[y].every(cell => cell !== 0)) {
            arena.splice(y, 1);
            arena.unshift(new Array(arena[0].length).fill(0));
            linesCleared++;
            y++; // –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Å–¥–≤–∏–≥–∞
        }
    }

    if (linesCleared > 0) {
        const pointsTable = [0, 40, 100, 300, 1200];
        player.score += pointsTable[linesCleared]; //  * player.level

        const oldLevel = player.level;

        // –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞–∂–¥—ã–µ 10 –ª–∏–Ω–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        player.level = Math.floor(player.score / 1000) + 1;

        if (player.level > oldLevel) {
            updateDropInterval(); // ‚¨ÖÔ∏è –£—Å–∫–æ—Ä—è–µ–º –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        }

        updateScore();
    }
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏ —É—Ä–æ–≤–Ω—è
function updateScore() {
    scoreEl.textContent = player.score;
    levelEl.textContent = player.level;
}

function updateDropInterval() {
    dropInterval = Math.max(1000 - (player.level - 1) * 100, 100);
}


// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–≥—Ä—ã
function update(time = 0) {
    if (isPaused) {
        drawPause();
        return requestAnimationFrame(update);
    }

    const deltaTime = time - lastTime;
    lastTime = time;

    dropCounter += deltaTime;
    if (dropCounter > dropInterval) {
        playerDrop();
    }

    draw();
    requestAnimationFrame(update);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
// document.addEventListener('keydown', event => {
//     if (event.key === 'p' || event.key === '–∑') {
//         isPaused = !isPaused;
//         if (!isPaused) lastTime = performance.now();
//     }

//     if (!isPaused) {
//         if (event.key === 'ArrowLeft') playerMove(-1);
//         else if (event.key === 'ArrowRight') playerMove(1);
//         else if (event.key === 'ArrowDown') playerDrop();
//         else if (event.key === 'ArrowUp') playerRotate();
//     }
// });
function keyDown(event) {
    if (event.key === 'p' || event.key === '–∑') {
        isPaused = !isPaused;
        if (!isPaused) lastTime = performance.now();
    }

    if (!isPaused) {
        if (event.key === 'ArrowLeft') playerMove(-1);
        else if (event.key === 'ArrowRight') playerMove(1);
        else if (event.key === 'ArrowDown') playerDrop();
        else if (event.key === 'ArrowUp') playerRotate();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
playerReset();
update();